package main

import (
	"fmt"
	"github.com/coutvv/energybot/internal/energy/db"
	manager2 "github.com/coutvv/energybot/internal/energy/manager"
	"log"

	"github.com/coutvv/energybot/internal/energy"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// TODO: may be delete stupid bot API from it (?)
func helpCommand(bot *tgbotapi.BotAPI, inputMsg *tgbotapi.Message) {
	helpText := `
	–ù—É —Ç–∏–ø–∞ "–≠–Ω–µ—Ä–≥–æ—Å–µ—Ç—å"
	–ö–æ–º–∞–Ω–¥—ã:
	–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Å–µ–≥–¥–∞
		/registry - –≤–æ–π—Ç–∏ –≤ –∏–≥—Ä—É
		/phase - –ø–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–∑—É –∏–≥—Ä—ã
		/map - –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É
		/resources - –ø–æ–∫–∞–∑–∞—Ç—å —Ä—ã–Ω–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤
		/market	- —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∂–µ
		/status {gamer} - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ (–¥–µ–Ω—å–≥–∏, —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏–∏)
		/moneynote - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ 
		/skip - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ö–æ–¥
	–§–∞–∑–∞ —Ç–æ—Ä–≥–æ–≤:
		/choose {1-4-6} - –≤—ã—Å—Ç–∞–≤–∏—Ç—å –æ–¥–Ω—É –∏–∑ —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏–π –Ω–∞ —Ç–æ—Ä–≥–∏
		/pass - —Å–ø–∞—Å–æ–≤–∞—Ç—å
		/doubt 13 - –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫—É–ø–∏—Ç—å –∑–∞ 13
		/up 1 - –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–∞ 1 –¥–æ–ª–ª–∞—Ä –¥–æ—Ä–æ–∂–µ
		/replace {1-3} - –∑–∞–º–µ–Ω–∏—Ç—å –∫—É–ø–ª–µ–Ω–Ω—É—é —Å—Ç–∞–Ω—Ü–∏—é —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π 
	–§–∞–∑–∞ —Ä–µ—Å–æ–≤:
		/buy {coal|oil|trash|nuclear} {count} {station-number} - –∫—É–ø–∏—Ç—å —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–∞ —Å–≤–æ—é —Å—Ç–∞–Ω—Ü–∏—é 
	–§–∞–∑–∞ –¥–æ–º–∏–∫–æ–≤:
		/setup {city-name} - –∫—É–ø–∏—Ç—å –¥–æ–º–∏–∫ –≤ –≥–æ—Ä–æ–¥–µ
	–§–∞–∑–∞ –±—é—Ä–æ–∫—Ä–∞—Ç–∏–∏:
		/charge {station-number} - –∑–∞–ø–∏—Ç–∞—Ç—å —ç–ª–µ–∫—Ç—Ä–æ—Å–µ—Ç—å —Å—Ç–∞–Ω—Ü–µ–π
	`
	msg := tgbotapi.NewMessage(inputMsg.Chat.ID, helpText)
	bot.Send(msg)
}

var game = energy.NewGame()
var repository = db.NewSqliteRepository()
var manager = manager2.Manager{Repository: repository}

// persistent commands

func registry(bot *tgbotapi.BotAPI, inputMsg *tgbotapi.Message) {
	user, newOr := manager.RegistryGamer(inputMsg)
	if newOr {
		log.Println("register new User in system: ", user)
	} else {
		log.Println("user existed already: ", user)
	}

	// TODO: gaming registry should be moved to Manager maybe
	var name = inputMsg.From.UserName
	var registred = game.RegistryGamer(name)
	var msgText string
	if registred {
		msgText = fmt.Sprintf("new player %s has been registred", name)
	} else {
		msgText = "player with name " + name + " is already playing!"
	}
	bot.Send(
		tgbotapi.NewMessage(inputMsg.Chat.ID, msgText),
	)
}

func phase(bot *tgbotapi.BotAPI, inputMsg *tgbotapi.Message) {

	msgText := game.CurrentPhase()
	bot.Send(
		tgbotapi.NewMessage(inputMsg.Chat.ID, msgText),
	)
}

func mapCommand(bot *tgbotapi.BotAPI, inputMsg *tgbotapi.Message) {
	msgText := game.MapString()
	bot.Send(
		tgbotapi.NewMessage(inputMsg.Chat.ID, msgText),
	)
}

func resources() {}

func market() {}

func status(bot *tgbotapi.BotAPI, inputMsg *tgbotapi.Message) {
	msgText := game.PlayerStats(inputMsg.From.UserName)
	bot.Send(
		tgbotapi.NewMessage(inputMsg.Chat.ID, msgText),
	)
}

func moneynote(bot *tgbotapi.BotAPI, inputMsg *tgbotapi.Message) {
	prices := map[int]int{
		0: 10,
		1: 22,
		2: 33,
	}
	resultNote := ""
	for k, v := range prices {
		resultNote += fmt.Sprintf("%d üè†\t=\t%d$\n", k, v)
	}
	bot.Send(
		tgbotapi.NewMessage(inputMsg.Chat.ID, resultNote),
	)
}

func skip(bot *tgbotapi.BotAPI, inputMsg *tgbotapi.Message) {
	var name = inputMsg.From.UserName
	game.Skip(name)
	bot.Send(
		tgbotapi.NewMessage(inputMsg.Chat.ID, fmt.Sprintf("Player %s has been skipped this round", name)),
	)
}

// torgi phase

func choose() {}

func pass() {}

func doubt() {}

func up() {}

func replace() {}

// resources phase

func buy() {}

// domiki phase

func setup() {}

// buerucracy phace
func charge() {}
